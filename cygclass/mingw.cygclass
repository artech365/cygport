################################################################################
#
# mingw.cygclass - for building cross-compiled MinGW packages
#
# Part of cygport - Cygwin packaging application
# Copyright (C) 2006-2020 Cygport authors
# Provided by the Cygwin project <https://cygwin.com/>
#
# cygport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cygport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cygport.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

#****h* Cygclasses/mingw.cygclass
#  SYNOPSIS
#  MINGW_ARCHS=...
#  inherit mingw
#  DESCRIPTION
#  This cygclass assists in the cross-compiling of packages for native Windows
#  using the MinGW-w64 toolchain.  While this can (and has) been done with
#  cross.cygclass, this method allows for building for all desired architectures
#  in the same build.  All four current Windows architectures are supported:
#  * i686: for classic 32-bit Intel/AMD systems, or WoW64 emulation on 64-bit systems.
#  * x86_64: for 64-bit Intel/AMD systems, the most prevalently available nowadays.
#  * armv7: for 32-bit ARM devices running Windows 10 IoT Core.
#  * aarch64: for 64-bit ARM devices and servers running Windows 10 for ARM.
#  Both x86 toolchains primarily use GNU binutils, GCC, and its runtime
#  libraries, where both ARM toolchains use LLVM, Clang, and its runtime
#  libraries, with wrapper scripts to provide GNU-compatible commands.
#  Supported build systems for cross-compiling are autotools, cmake, meson,
#  Qt5 qmake, and custom Makefiles.  The respective cygclasses still need
#  to be inherit()ed, with mingw.cygclass being inherit()ed last.
#  INHERITS
#  mingw32.cygclass, mingw64.cygclass, mingwarm32.cygclass, mingwarm64.cygclass
#****

case ${MINGW_ARCHS:=i686;x86_64} in
all) MINGW_ARCHS="i686;x86_64;armv7;aarch64" ;;
esac

inherit mingw32 mingw64 mingwarm32 mingwarm64

ARCH=noarch
unset ARCH_i686 ARCH_x86_64


#****v* mingw.cygclass/MINGW_ARCHS
#  DESCRIPTION
#  A string containing the MinGW architecture(s) for which this package should
#  be built.  Any combination of i686, x86_64, armv7, and aarch64 are valid.
#  The alias "all" is accepted.
#
#  This variable must be defined before inherit()ing mingw.cygclass.
#  If undefined, defaults to "i686;x86_64".
#****

#****v* mingw.cygclass/MINGW_BUILDDIR_SUFFIX
#  DESCRIPTION
#  The name of the subdirectory to use for this iteration of the build,
#  regardless of architecture.  For instance, some libraries cannot be built
#  properly both static (without dllimport/dllexport) and shared (with
#  dllimport/dllexport) at the same time.  Alternatively, some libraries
#  can be built in different configurations resulting in different library
#  names.  Defining this variable before each iteration of mingw_* commands
#  avoids having to manage separate build directories manually.
#****

#****C* mingw.cygclass/mingw_lndirs
#  DESCRIPTION
#  Runs lndirs separately for each enabled architecture's build directory.
#****
mingw_lndirs() {
	local t
	for t in 32:i686 64:x86_64 arm32:armv7 arm64:aarch64
	do
		if [[ ${MINGW_ARCHS} =~ "${t#*:}" ]]
		then
			mingw${t%:*}_lndirs "${@}"
		fi
	done
}

#****C* mingw.cygclass/mingw_configure
#  DESCRIPTION
#  Runs cygconf separately for each enabled architecture.  Any arguments are passed along.
#****
#****v* mingw_configure/MINGW32_CONFIGURE_ARGS
#  DESCRIPTION
#  i686-specific configure flags to pass only to the i686 stage of mingw_configure.
#****
#****v* mingw_configure/MINGW64_CONFIGURE_ARGS
#  DESCRIPTION
#  x86_64-specific configure flags to pass only to the x86_64 stage of mingw_configure.
#****
#****v* mingw_configure/MINGWARM32_CONFIGURE_ARGS
#  DESCRIPTION
#  armv7-specific configure flags to pass only to the armv7 stage of mingw_configure.
#****
#****v* mingw_configure/MINGWARM64_CONFIGURE_ARGS
#  DESCRIPTION
#  aarch64-specific configure flags to pass only to the aarch64 stage of mingw_configure.
#****
mingw_configure() {
	local t
	for t in 32:i686 64:x86_64 arm32:armv7 arm64:aarch64
	do
		if [[ ${MINGW_ARCHS} =~ "${t#*:}" ]]
		then
			mingw${t%:*}_configure "${@}"
		fi
	done
}

#****C* mingw.cygclass/mingw_make
#  DESCRIPTION
#  Runs cygmake separately for each enabled architecture.  Any arguments are passed along.
#****
mingw_make() {
	local t
	for t in 32:i686 64:x86_64 arm32:armv7 arm64:aarch64
	do
		if [[ ${MINGW_ARCHS} =~ "${t#*:}" ]]
		then
			mingw${t%:*}_make "${@}"
		fi
	done
}

#****C* mingw.cygclass/mingw_cmake
#  DESCRIPTION
#  Runs cygcmake separately for each enabled architecture.  Any arguments are passed along.
#****
#****v* mingw_cmake/MINGW32_CMAKE_ARGS
#  DESCRIPTION
#  i686-specific cmake flags to pass only to the i686 stage of mingw_cmake.
#****
#****v* mingw_cmake/MINGW64_CMAKE_ARGS
#  DESCRIPTION
#  x86_64-specific cmake flags to pass only to the x86_64 stage of mingw_cmake.
#****
#****v* mingw_cmake/MINGWARM32_CMAKE_ARGS
#  DESCRIPTION
#  armv7-specific cmake flags to pass only to the armv7 stage of mingw_cmake.
#****
#****v* mingw_cmake/MINGWARM64_CMAKE_ARGS
#  DESCRIPTION
#  aarch64-specific cmake flags to pass only to the aarch64 stage of mingw_cmake.
#****
mingw_cmake() {
	local t
	for t in 32:i686 64:x86_64 arm32:armv7 arm64:aarch64
	do
		if [[ ${MINGW_ARCHS} =~ "${t#*:}" ]]
		then
			mingw${t%:*}_cmake "${@}"
		fi
	done
}

#****C* mingw.cygclass/mingw_meson
#  DESCRIPTION
#  Runs cygmeson separately for each enabled architecture.  Any arguments are passed along.
#****
#****v* mingw_meson/MINGW32_MESON_ARGS
#  DESCRIPTION
#  i686-specific meson flags to pass only to the i686 stage of mingw_meson.
#****
#****v* mingw_meson/MINGW64_MESON_ARGS
#  DESCRIPTION
#  x86_64-specific meson flags to pass only to the x86_64 stage of mingw_meson.
#****
#****v* mingw_meson/MINGWARM32_MESON_ARGS
#  DESCRIPTION
#  armv7-specific meson flags to pass only to the armv7 stage of mingw_meson.
#****
#****v* mingw_meson/MINGWARM64_MESON_ARGS
#  DESCRIPTION
#  aarch64-specific meson flags to pass only to the aarch64 stage of mingw_meson.
#****
mingw_meson() {
	local t
	for t in 32:i686 64:x86_64 arm32:armv7 arm64:aarch64
	do
		if [[ ${MINGW_ARCHS} =~ "${t#*:}" ]]
		then
			mingw${t%:*}_meson "${@}"
		fi
	done
}

#****C* mingw.cygclass/mingw_ninja
#  DESCRIPTION
#  Runs cygninja separately for each enabled architecture.  Any arguments are passed along.
#****
mingw_ninja() {
	local t
	for t in 32:i686 64:x86_64 arm32:armv7 arm64:aarch64
	do
		if [[ ${MINGW_ARCHS} =~ "${t#*:}" ]]
		then
			mingw${t%:*}_ninja "${@}"
		fi
	done
}

#****C* mingw.cygclass/mingw_qt5_qmake
#  DESCRIPTION
#  Runs cygqmake5 separately for each enabled architecture.  Any arguments are passed along.
#****
mingw_qt5_qmake() {
	local t
	for t in 32:i686 64:x86_64 arm32:armv7 arm64:aarch64
	do
		if [[ ${MINGW_ARCHS} =~ "${t#*:}" ]]
		then
			mingw${t%:*}_qt5_qmake "${@}"
		fi
	done
}

#****I* mingw.cygclass/mingw_make_install
#  DESCRIPTION
#  Runs cyginstall separately for each enabled architecture.  Any arguments are passed along.
#****
mingw_make_install() {
	local t
	for t in 32:i686 64:x86_64 arm32:armv7 arm64:aarch64
	do
		if [[ ${MINGW_ARCHS} =~ "${t#*:}" ]]
		then
			mingw${t%:*}_make_install "${@}"
		fi
	done
}

#****I* mingw.cygclass/mingw_ninja_install
#  DESCRIPTION
#  Runs ninja_install separately for each enabled architecture.  Any arguments are passed along.
#****
mingw_ninja_install() {
	local t
	for t in 32:i686 64:x86_64 arm32:armv7 arm64:aarch64
	do
		if [[ ${MINGW_ARCHS} =~ "${t#*:}" ]]
		then
			mingw${t%:*}_ninja_install "${@}"
		fi
	done
}

#****I* mingw.cygclass/mingw_qt5_qmake_install
#  DESCRIPTION
#  Runs qt5_qmake_install separately for each enabled architecture.  Any arguments are passed along.
#****
mingw_qt5_qmake_install() {
	local t
	for t in 32:i686 64:x86_64 arm32:armv7 arm64:aarch64
	do
		if [[ ${MINGW_ARCHS} =~ "${t#*:}" ]]
		then
			mingw${t%:*}_qt5_qmake_install "${@}"
		fi
	done
}

src_compile() {
	if inherited cmake
	then
		cd ${B}
		: ${CYGCMAKE_GENERATOR=Ninja}
		mingw_cmake
		if [ "${CYGCMAKE_GENERATOR}" = "Ninja" ]
		then
			mingw_ninja
		else
			mingw_make
		fi
	elif inherited meson
	then
		cd ${S}
		mingw_meson
		mingw_ninja
	elif inherited qt5-qmake
	then
		cd ${B}
		mingw_qt5_qmake ${S}
		mingw_make
	else
		cd ${S}
		cygautoreconf
		cd ${B}
		mingw_configure
		mingw_make
	fi
}

src_install() {
	if inherited cmake && [ "${CYGCMAKE_GENERATOR-Ninja}" = "Ninja" ]
	then
		cd ${B}
		mingw_ninja_install
	elif inherited meson
	then
		cd ${S}
		mingw_ninja_install
	elif inherited qt5-qmake
	then
		cd ${B}
		mingw_qt5_qmake_install
	else
		cd ${B}
		mingw_make_install
	fi
}

readonly -f mingw_lndirs mingw_configure mingw_make mingw_cmake \
	mingw_meson mingw_ninja mingw_qt5_qmake mingw_make_install \
	mingw_ninja_install mingw_qt5_qmake_install
	