################################################################################
#
# mingw-internal.cygclass - internal functions for mingw*.cygclass
#
# Part of cygport - Cygwin packaging application
# Copyright (C) 2006-2020 Cygport authors
# Provided by the Cygwin project <https://cygwin.com/>
#
# cygport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cygport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cygport.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

__mingw_init() {
	local a=${1} t=${2}
	local c h n p r s v

	declare -g MINGW${t}_HOST="${a}-w64-mingw32"
	declare -g MINGW${t}_TARGET="${a}-w64-mingw32"

	h=MINGW${t}_HOST
	for c in CC=gcc CXX=g++ F77=gfortran FC=gfortran OBJC=gcc OBJCXX=g++ \
		AR=ar DLLTOOL=dlltool NM=nm OBJDUMP=objdump RANLIB=ranlib \
		RC=windres STRIP=strip PKG_CONFIG=pkg-config QT5_QMAKE=qmake-qt5
	do
		declare -g MINGW${t}_${c%=*}="${!h}-${c#*=}"
	done
	if inherited clang
	then
		declare -g MINGW${t}_CC="${!h}-clang"
		declare -g MINGW${t}_CXX="${!h}-clang++"
	fi

	declare -g MINGW${t}_SYSROOT="/usr/${!h}/sys-root"
	r=MINGW${t}_SYSROOT
	declare -g MINGW${t}_PREFIX="${!r}/mingw"
	p=MINGW${t}_PREFIX
	declare -g MINGW${t}_BINDIR="${!p}/bin"
	declare -g MINGW${t}_INCLUDEDIR="${!p}/include"
	declare -g MINGW${t}_LIBDIR="${!p}/lib"
	declare -g MINGW${t}_DATADIR="${!p}/share"

	if inherited mingw && [[ ${MINGW_ARCHS} =~ "${a}" ]] && [[ "${NAME}" =~ "mingw-" ]]
	then
		_CYGPORT_INTERNAL_multi_doc_=1
		n=${NAME#mingw-}
		PKG_NAMES+=" mingw64-${a}-${n}"
		declare -g mingw64_${a}_${n//[-\.]/_}_CONTENTS="${!p#/} usr/share/doc/mingw64-${a}-${n}/"
	fi
}

__mingw_wrapper() {
	local ovar var
	local toolvars=(CC=gcc CXX=g++ F77=gfortran FC=gfortran OBJC=gcc OBJCXX=g++ \
			AR=ar DLLTOOL=dlltool NM=nm OBJDUMP=objdump RANLIB=ranlib \
			RC=windres STRIP=strip PKG_CONFIG=pkg-config QT5_QMAKE=qmake-qt5)
	local miscvars=(CHOST CTARGET CC_SYSROOT)
	local expvars=(CFLAGS CXXFLAGS)

	__check_triplet ${1}

	for var in ${miscvars[*]} ${toolvars[*]%=*} ${expvars[*]}
	do
		ovar="orig_${var}"
		local ${ovar}="${!var}"
	done
	declare -g CHOST=${1}
	shift
	declare -g CTARGET=${CHOST}
	declare -g CC_SYSROOT=/usr/${CHOST}/sys-root
	# mingw-w64 actually supports these now, but with libssp it is fragile
	declare -gx CFLAGS="${CFLAGS/-Wp,-D_FORTIFY_SOURCE=2 -fstack-protector-strong}"
	declare -gx CXXFLAGS="${CXXFLAGS/-Wp,-D_FORTIFY_SOURCE=2 -fstack-protector-strong}"

	for var in ${toolvars[*]}
	do
		declare -g ${var%=*}=${CHOST}-${var#*=}
	done
	if inherited clang
	then
		declare -g CC="${CHOST}-clang"
		declare -g CXX="${CHOST}-clang++"
	fi

	if ! check_prog ${CC} || ! check_prog ${STRIP}
	then
		error "This package requires ${CHOST} binutils and gcc"
	fi

	if ! defined __MINGW_WRAPPER_NO_CWD
	then
		mkdir -p ${CHOST}/${MINGW_BUILDDIR_SUFFIX}
		pushd ${CHOST}/${MINGW_BUILDDIR_SUFFIX}
	fi

	inform "cross-compiling for ${CHOST}"
	"${@}" || error "${1} for ${CHOST} failed"

	if ! defined __MINGW_WRAPPER_NO_CWD
	then
		popd
	fi

	for var in ${miscvars[*]} ${toolvars[*]%=*}
	do
		ovar="orig_${var}"
		declare -g ${var}="${!ovar}"
	done
	for var in ${expvars[*]}
	do
		ovar="orig_${var}"
		declare -gx ${var}="${!ovar}"
	done
}

readonly -f __mingw_init __mingw_wrapper
